pipeline {
    agent any
    environment {
        REPO = 'apm-agent-java'
        APP = 'spring-petclinic'
        APP_BASE_DIR = "src/${APP}"
        ORCH_URL='localhost:8000' // FIXME: For development only.
    }
    options {
        timeout(time: 3, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
        timestamps()
        ansiColor('xterm')
        durabilityHint('PERFORMANCE_OPTIMIZED')

    }
    parameters {
    // TODO: Allow for SHA instead?
    string(name: 'agent_version', defaultValue: 'v1.9.0', description: 'Version of agent. Should correspond to tag, e.g. `v1.9.0`.')
    // TODO: Drop-down of JVM versions instead
    string(name: 'jvm_version', defaultValue: '9.0.4', description: 'Version of JVM.')
    string(name: 'concurrent_requests', defaultValue: '100', description: 'The number of concurrent requests to test with.')
    // 300 min is the overall timeout so 280 is probably fine.
    string(name: 'duration', defaultValue: '10', description: 'Test duration in minutes. Max: 280')
    string(name: 'num_of_runs', defaultValue: '1', description: 'Number of test runs to execute.')
    }

    stages {
        stage('Pre-flight'){
            steps {
                echo 'Getting authentication information from Vault'
                withSecretVault(secret: 'secret/apm-team/ci/bandstand', user_var_name: 'APP_TOKEN_TYPE', pass_var_name: 'APP_TOKEN'){
                    script {
                        env.SESSION_TOKEN = sh(script: ".ci/load/scripts/start.sh")
                    }
                }
            }    
        }
        stage('Load test') {
            parallel {
                stage('Start load generation') {
                    agent { label 'linux && immutable' }
                    steps {
                            withSecretVault(secret: 'secret/apm-team/ci/bandstand', user_var_name: 'APP_TOKEN_TYPE', pass_var_name: 'APP_TOKEN'){
                                sh(script: ".ci/load/scripts/load_agent.sh")
                            }
                    }
                }
                stage('Start application') {
                    steps {
                        echo 'APP: Implement me!'
                        gitCheckout(
                            basedir: "${APP_BASE_DIR}",
                            branch: 'main',
                            repo: "https://github.com/spring-projects/${APP}.git",
                            credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',
                            shallow: false
                        )
                        dir("${APP_BASE_DIR}"){
                            sh(script: "./mvnw spring-boot:run")
                        }
                    }
                }
            }
        }
    }
}