pipeline {
    agent any
    environment {
        REPO = 'apm-agent-java'
        APP = 'spring-petclinic'
        APP_BASE_DIR = "src/${APP}"
        // BASE_DIR = "src/github.com/elastic/${env.REPO}"
        // DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'
        // ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'
        // NEXUS_SECRET = 'secret/apm-team/ci/nexus'
        // MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'
        // HOME = "${env.WORKSPACE}"
        // JAVA_HOME = "${env.HUDSON_HOME}/.java/java10"
        // PATH = "${env.JAVA_HOME}/bin:${env.PATH}"
    }
    options {
        timeout(time: 3, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
        timestamps()
        ansiColor('xterm')
        durabilityHint('PERFORMANCE_OPTIMIZED')

    }
    parameters {
    // TODO: Allow for SHA instead?
    string(name: 'agent_version', defaultValue: 'v1.9.0', description: 'Version of agent. Should correspond to tag, e.g. `v1.9.0`.')
    // TODO: Drop-down of JVM versions instead
    string(name: 'jvm_version', defaultValue: '9.0.4', description: 'Version of JVM.')
    string(name: 'concurrent_requests', defaultValue: '100', description: 'The number of concurrent requests to test with.')
    string(name: 'duration', defaultValue: '10', description: 'Test duration in minutes. Max: 280') // 300 min is the overall timeout so 280 is probably fine.
    string(name: 'num_of_runs', defaultValue: '1', description: 'Number of test runs to execute.')
  }
    stages {
        stage('Prepare test application') {
            steps {
                gitCheckout(
                    basedir: "${APP_BASE_DIR}",
                    branch: 'main',
                    repo: "https://github.com/spring-projects/${APP}.git",
                    credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',
                    shallow: false
                )
            }
        }
        stage('Start test application') {
            steps {
                dir("${APP_BASE_DIR}"){
                    sh(script: "./mvnw spring-boot:run")
                }
                echo 'Implement me!'
                echo 'I will need to use the options passed in!'
            }
        }
        stage('Download load-generation container') {
            steps {
                echo 'Implement me!'
            }
        }
        stage('Start load generation') {
            steps {
                echo 'Implement me!'
            }
        }
    }
}
