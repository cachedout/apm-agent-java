#!/usr/bin/env groovy

@Library('apm@current') _
pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'apm-agent-java'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'
    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'
    CODECOV_SECRET = 'secret/apm-team/ci/apm-agent-java-codecov'
    GITHUB_CHECK_ITS_NAME = 'Integration Tests'
    ITS_PIPELINE = 'apm-integration-tests-selector-mbp/master'
    MAVEN_CONFIG = '-Dmaven.repo.local=.m2'
    OPBEANS_REPO = 'opbeans-java'
  }
  options {
    timeout(time: 3, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')

  }
  parameters {
    string(name: 'MAVEN_CONFIG', defaultValue: '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn', description: 'Additional maven options.')
    booleanParam(name: 'push_docker', defaultValue: false, description: 'Push Docker image during release stage')
    // FIXME: Remove before PR
    booleanParam(name: 'release_stage', defaultValue: false, description: 'Ungate the release stage')
  }

  stages {
    stage('Initializing'){
      options { skipDefaultCheckout() }
      environment {
        HOME = "${env.WORKSPACE}"
        JAVA_HOME = "${env.HUDSON_HOME}/.java/java10"
        PATH = "${env.JAVA_HOME}/bin:${env.PATH}"
        MAVEN_CONFIG = "${params.MAVEN_CONFIG} ${env.MAVEN_CONFIG}"
      }
      stages {
        /**
         Checkout the code and stash it, to use it on other stages.
        */
        stage('Checkout') {
          steps {
            pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
            deleteDir()
            gitCheckout(basedir: "${BASE_DIR}")
            stash allowEmpty: true, name: 'source', useDefaultExcludes: false
          }
        }
      }
    }
        stage('Release') {
      options { skipDefaultCheckout () }
      when {
        // FIXME: Remove before PR
        // tag pattern: 'v\\d+\\.\\d+\\.\\d+', comparator: 'REGEXP'
        expression { return params.release_stage }
      }
      stages{
        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.
        stage('Check oss.sonatype.org') {
          steps {
            httpRequest(url: "https://oss.sonatype.org/#welcome")
          }
        }
        // 2. Review project version.
        stage('Review project version') {
          steps {
            script {
              // Show the select input modal
              def INPUT_PARAMS = input message: 'Do you wish to update the version?', ok: 'Next', parameters: [choice(name: 'UPDATE_CHOICE', choices:['Yes', 'No'], description: "This will run `mvn release:update-versions`")]
              if (INPUT_PARAMS == 'Yes') {
                  // FIXME We might not yet have the right credentials loaded to do this unless we move over to the internal-ci
                  sh mvn release:update-versions
              } else {
                  echo 'Skipping version update'
              }
            }
          }
        }
        // 3. Execute the release Jenkins job on the internal ci server.
            // For now we assume that the release has been pushed to staging already on the internal CI
        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.
        stage('Nexus release') {
          steps {
            script {
              def foundStagingId = nexusFindStagingId(stagingProfileId: "TODO MOVE TO VAULT", description: "TODO")
              nexusCloseStagingRepository(stagingProfileId: "TODO MOVE TO VAULT", stagingId: foundStagingId)
              nexusReleaseStagingRepository(stagingProfileId: "TODO MOVE TO VAULT", stagingId: foundStagingId)
            }
          }
        }
        // 5. Fetch and checkout the latest tag e.g. git fetch origin
          // We already have this :)
        // 6. If this was a major release, create a new branch for the major.
        stage('Branch creation') {
          steps {
            script {
              def isMajor = sh(script: 'git tag|tail -1|cut -f2-3 -d "."|{ read ver; test $ver == "0.0"; }', returnStatus: true)
              if (isMajor == 0) {
                echo "This appears to be a major version. We are creating a new branch in the apm-agent-java repo on GitHub."
                // We need to create a new branch. First get the name of the branch
                def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d "."|awk \'{print $1".x"}\'', returnStdout: true)
                echo "This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub."
                // Now we need to branch
                sh(script: "git checkout -b $newBranchName")
                // And push
                githubEnv()
                gitPush() 
                // 6.1 Add the new branch to the conf.yaml in the docs repo
                input message: "This was a major version release. Please update the conf.yml in the docs repo before continuing", ok "Continue"
              } else {  // This was a minor release
                // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0
                // Determine current tag
                def curTag = sh(script: "git tag|tail -1", returnStdout: true)
                def targetBranch = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d '.'|awk \'{print $1".x"}\'', returnStdout: true)
                sh(script: "git branch -f $targetBranch $curTag")
                gitPush()
              }
            }
            // Checkout the tag again!
            sh("git checkout ${BUILD_TAG}")
          }
        }
        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. 
        stage('Generate a proposed CHANGELOG') {
          steps {
            generateChangelog(repo: 'apm-agent-java')
          }
        }
        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.
        stage('Create GitHub release draft') {
          steps {
            script {
              def curTag = sh(script: "git tag|tail -1", returnStdout: true)
              // Construct the URL with anchor for the release notes
              // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0
              def baseUrl = "https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-"
              def dotX = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d "."|awk \'{print $1".x"}\'', returnStdout: true)
              def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)
              def finalUrl = sh(script: "echo $baseUrl$dotX\.html#release-notes-$bareTag")
              def ret = githubReleaseCreate(draft: true, body: "[Release Notes for $bareTag]($finalUrl)")
              env.RELEASE_ID = ret['id']
            }
          }
        }
        // 10. Update cloudfoundry/index.yml
        // Needs to append a line such as the following:
        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar
        stage('Update Cloudfoundry') {
          steps {
            script {
              sh("git checkout master")
              def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)
              def baseUrl = "https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent"
              def lineToAppend = sh(script: "echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\.jar' >> cloudfoundry/index.yml ")
              gitPush()
            }
          }
        }
        // 11. Wait for released package to be available in maven central
        stage('Wait for artifact to be available in Maven Central') {
          steps {
            script {
              // We are looking for something like this:
              // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom
              def baseUrl = "https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java"
              def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)
              def fullUrl = sh(script: "$baseUrl/$bareTag/apm-agent-java-$bareTag\.pom")
              waitUntil(initialRecurrencePeriod: 15000) {
                script {
                  def ret = sh(script: "curl -fs $fullUrl >/dev/null 2>&1", returnStatus: true)
                  echo "Waiting for the artifacts to be published on Sonatype"
                  return ret == 0
                }
              }
            }
          }
        }
        // 12. Publish release on Github. This will notify users watching repository.
        stage('Publish release on GitHub') {
          steps {
            githubReleasePublish(id: ${env.RELEASE_ID})
          }
        }
      }
    }
  }
}
