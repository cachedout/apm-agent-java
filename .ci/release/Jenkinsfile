#!/usr/bin/env groovy

@Library('apm@current') _
pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'apm-agent-java'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    DOCKERHUB_SECRET = 'secret/apm-team/ci/elastic-observability-dockerhub'
    ELASTIC_DOCKER_SECRET = 'secret/apm-team/ci/docker-registry/prod'
    NEXUS_SECRET = 'secret/apm-team/ci/nexus'
    MAVEN_CONFIG = '-B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dmaven.repo.local=.m2'
    OPBEANS_REPO = 'opbeans-java'

  }
  options {
    timeout(time: 3, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    durabilityHint('PERFORMANCE_OPTIMIZED')

  }
  parameters {
    string(name: 'branch_specifier', defaultValue: 'master')
  }

  stages {
    stage('Initializing'){
      options { skipDefaultCheckout() }
      environment {
        HOME = "${env.WORKSPACE}"
        JAVA_HOME = "${env.HUDSON_HOME}/.java/java10"
        PATH = "${env.JAVA_HOME}/bin:${env.PATH}"
      }
      stages {
        /**
         Checkout the code
        */
        stage('Checkout') {
          steps {
            dir("${BASE_DIR}") {
              // This is required to ensure that Maven is working with a real branch
              sh(script: "git checkout -f ${branch_specifier}")
            }
          }
        }
      }
    }
    stage('Release') {
      options { skipDefaultCheckout () }
      stages{
        // 1. Check to see if oss.sonatype.org is up. We throw an exception and fail the job if there is no response.
        stage('Check oss.sonatype.org') {
          steps {
            // If this fails, an exception should be thrown and execution will halt
            httpRequest(url: "https://oss.sonatype.org/#welcome")
          }
        }
        // 1.1 Check to ensure the build is green. Require confirmation if it is not.
        stage('Check master build status') {
          steps {
            script {
              // If this build is not green: https://apm-ci.elastic.co/job/apm-agent-java/job/apm-agent-java-mbp/job/master/
              if(!buildStatus(host: 'apm-ci.elastic.co', job: ['apm-agent-java', 'apm-agent-java-mbp', 'master'], return_boolean: true)) {
                input(message: "WARNING! The master build is not passing. Do you wish to continue?")
              }
            }
          }
        }
        // 2. Review project version.
        stage('Review project version') {
          steps {
            script {
              // 2.1 Fetch the current version from pom.xml
              def ver = mvnVersion(showQualifiers: true)
              // 2.2 Raise a prompt asking if the version is correct or if they wish to update
              def should_continue = input(message: "Current version is ${ver}", parameters: [
                [
                  $class: 'ChoiceParameterDefinition',
                  name: "Do you wish to update the version?",
                  "choices": ["Yes", "No"],
                  description: "Selecting 'Yes' will allow you to select the new version in the next step."
                ]
              ])
              if (should_continue == 'Yes'){
                def new_version = input(message: "Please enter version to change to:", parameters:
                  [
                    [
                      $class: 'StringParameterDefinition',
                      defaultValue: "${ver}",
                      description: 'We will run mvn versions:set -DnewVersion=<NEW_VERSION>', name: 'New Version'
                    ]
                  ]
                )
                sh(name: "mavenVersionUpdate", script: "mvn versions:set -DnewVersion=${new_version}")
              } else {
                echo "Skipping version update"
              }
            }
          }
        }
        // 3. Execute the release Jenkins job on the internal ci server.
            // For now we assume that the release has been pushed to staging already on the internal CI
        // 4. Login to oss.sonatype.org, go to Staging Repositories, close and release the staged artifacts.
        stage('Nexus release') {
          steps {
            script {
              def spid = getVault('nexus')["staging-profile-id"]
              dir("${BASE_DIR}"){
                withEnvMask(vars: [[var: "SPID", password: spid]]){
                  def foundStagingId = nexusFindStagingId(stagingProfileId: "${SPID}", groupId: "co.elastic.apm")
                  nexusCloseStagingRepository(stagingProfileId: "${SPID}", stagingId: foundStagingId)
                  nexusReleaseStagingRepository(stagingProfileId: "${SPID}", stagingId: foundStagingId)
                }

              }
            }
          }
        }
        // 5. Fetch and checkout the latest tag e.g. git fetch origin
          // We already have this :)
        // 6. If this was a major release, create a new branch for the major.
        stage('Branch creation') {
          steps {
            dir("${BASE_DIR}") {
              script {
                def curVer = mvnVersion()
                def isMajor = sh(script: "./scripts/jenkins/is_major.sh ${curVer}", returnStatus: true)
                if (isMajor == 0) {
                  // We need to create a new branch. First get the name of the branch
                  def newBranchName = sh(script: 'git tag|tail -1|sed s/v//|cut -f1 -d "."|awk \'{print $1".x"}\'', returnStdout: true)
                  echo "This appears to be a major version. We are creating a new branch for $newBranchName in the apm-agent-java repo on GitHub."
                  // Now we need to branch
                  sh(script: "git checkout -b $newBranchName")
                  // And push
                  githubEnv()
                  gitPush() 
                  // 6.1 Add the new branch to the conf.yaml in the docs repo
                  input message: "This was a major version release. Please update the conf.yml in the docs repo before continuing", ok "Continue"
                } else {  // This was a minor release
                  // 7. If this was a minor release, reset the current major branch (1.x, 2.x etc) to point to the current tag, e.g. git branch -f 1.x v1.1.0
                  // Determine current tag
                  def curTag = sh(script: "git tag|tail -1", returnStdout: true)
                  def targetBranch = sh(script: './scripts/jenkins/target_branch.sh', returnStdout: true)
                  sh(script: "git branch -f $targetBranch $curTag")
                  gitPush()
                }
              }
              // Checkout the tag again!
              sh("git checkout ${BUILD_TAG}")
            }
          }
        }
        // 8. Update CHANGELOG.asciidoc to reflect version release. Go over PRs or git log and add bug fixes and features. 
        stage('Generate a proposed CHANGELOG') {
          steps {
            githubEnv()
            generateChangelog(repo: 'apm-agent-java')
          }
        }
        // 9. Go to elastic/apm-agent-java/releases and draft a new release. Provide a link to release notes in documentation as release description.
        stage('Create GitHub release draft') {
          steps {
            dir("${BASE_DIR}"){
              script {
                // def curTag = sh(script: "git tag|tail -1", returnStdout: true)
                def curVer = mvnVersion(showQualifiers: false)
                // Construct the URL with anchor for the release notes
                // Ex: https://www.elastic.co/guide/en/apm/agent/java/current/release-notes-1.x.html#release-notes-1.13.0
                def finalUrl = sh(script: "scripts/jenkins/generate_release_notes_url.sh ${curVer}", , returnStdout: true)
                def ret = githubReleaseCreate(draft: true, name: "Release ${curVer}", body: "[Release Notes for ${curVer}](${finalUrl})")
                env.RELEASE_ID = ret['id']
                env.RELEASE_NOTES_URL = finalUrl
              }
            }

          }
        }
        // 11. Wait for released package to be available in maven central
        stage('Wait for artifact to be available in Maven Central') {
          steps {
            dir("${BASE_DIR}"){
              script {
                // We are looking for something like this:
                // https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java/1.1.12/apm-agent-java-1.1.12.pom
                def baseUrl = "https://oss.sonatype.org/service/local/repositories/releases/content/co/elastic/apm/apm-agent-java"
                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)
                def fullUrl = sh(script: "$baseUrl/$bareTag/apm-agent-java-$bareTag\.pom")
                echo "Sleeping for ten minutes to wait for Sonatype"
                sleep(time: 10, unit: "MINUTES")
                waitUntil(initialRecurrencePeriod: 60000) {
                  script {
                    def ret = sh(script: "curl -fs $fullUrl >/dev/null 2>&1", returnStatus: true)
                    echo "Waiting for the artifacts to be published on Sonatype"
                    return ret == 0
                  }
                }
              }
            }

          }
        }
        // 12. Update cloudfoundry/index.yml
        // Needs to append a line such as the following:
        // 1.13.0: https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.13.0/elastic-apm-agent-1.13.0.jar
        stage('Update Cloudfoundry') {
          steps {
            dir("${basedir}") {
              script {
                sh("git checkout master")
                def bareTag = sh(script: 'git tag|tail -1|sed s/v//', returnStdout: true)
                def baseUrl = "https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent"
                def lineToAppend = sh(script: "echo '$baseUrl: $baseUrl/$bareTag/elastic-apm-agent-$bareTag\.jar' >> cloudfoundry/index.yml ")
                gitPush()
              }
            }
          }
        }
        // 13. Publish release on Github. This will notify users watching repository.
        stage('Publish release on GitHub') {
          steps {
            // wait until we can get the release notes
            
            githubReleasePublish(id: ${env.RELEASE_ID})
          }
        }
        // 14. Publish Docker images
        stage('Build and push Docker images') {
          steps {
            sh(label: "Build Docker image", script: "scripts/jenkins/build_docker.sh")
            // Get Docker registry credentials
            dockerLogin(secret: "${ELASTIC_DOCKER_SECRET}", registry: 'docker.elastic.co')
            sh(label: "Push Docker image", script: "scripts/jenkins/push_docker.sh")
          }
        }
      }
    }
  }
}
